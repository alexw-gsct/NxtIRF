// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// IRF_RLE_From_Cov
List IRF_RLE_From_Cov(std::string s_in, std::string seqname, int start, int end, int strand);
RcppExport SEXP _rIRFinder_IRF_RLE_From_Cov(SEXP s_inSEXP, SEXP seqnameSEXP, SEXP startSEXP, SEXP endSEXP, SEXP strandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s_in(s_inSEXP);
    Rcpp::traits::input_parameter< std::string >::type seqname(seqnameSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type strand(strandSEXP);
    rcpp_result_gen = Rcpp::wrap(IRF_RLE_From_Cov(s_in, seqname, start, end, strand));
    return rcpp_result_gen;
END_RCPP
}
// IRF_RLEList_From_Cov
List IRF_RLEList_From_Cov(std::string s_in, int strand);
RcppExport SEXP _rIRFinder_IRF_RLEList_From_Cov(SEXP s_inSEXP, SEXP strandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s_in(s_inSEXP);
    Rcpp::traits::input_parameter< int >::type strand(strandSEXP);
    rcpp_result_gen = Rcpp::wrap(IRF_RLEList_From_Cov(s_in, strand));
    return rcpp_result_gen;
END_RCPP
}
// IRF_gunzip
int IRF_gunzip(std::string s_in, std::string s_out);
RcppExport SEXP _rIRFinder_IRF_gunzip(SEXP s_inSEXP, SEXP s_outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s_in(s_inSEXP);
    Rcpp::traits::input_parameter< std::string >::type s_out(s_outSEXP);
    rcpp_result_gen = Rcpp::wrap(IRF_gunzip(s_in, s_out));
    return rcpp_result_gen;
END_RCPP
}
// IRF_main
int IRF_main(std::string bam_file, std::string reference_file, std::string output_file);
RcppExport SEXP _rIRFinder_IRF_main(SEXP bam_fileSEXP, SEXP reference_fileSEXP, SEXP output_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bam_file(bam_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type reference_file(reference_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_file(output_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(IRF_main(bam_file, reference_file, output_file));
    return rcpp_result_gen;
END_RCPP
}
// IRF_GenerateMappabilityReads
int IRF_GenerateMappabilityReads(std::string genome_file, std::string out_fa, int read_len, int read_stride, int error_pos);
RcppExport SEXP _rIRFinder_IRF_GenerateMappabilityReads(SEXP genome_fileSEXP, SEXP out_faSEXP, SEXP read_lenSEXP, SEXP read_strideSEXP, SEXP error_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type genome_file(genome_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type out_fa(out_faSEXP);
    Rcpp::traits::input_parameter< int >::type read_len(read_lenSEXP);
    Rcpp::traits::input_parameter< int >::type read_stride(read_strideSEXP);
    Rcpp::traits::input_parameter< int >::type error_pos(error_posSEXP);
    rcpp_result_gen = Rcpp::wrap(IRF_GenerateMappabilityReads(genome_file, out_fa, read_len, read_stride, error_pos));
    return rcpp_result_gen;
END_RCPP
}
// IRF_GenerateMappabilityRegions
int IRF_GenerateMappabilityRegions(std::string bam_file, std::string output_file, int threshold);
RcppExport SEXP _rIRFinder_IRF_GenerateMappabilityRegions(SEXP bam_fileSEXP, SEXP output_fileSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bam_file(bam_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_file(output_fileSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(IRF_GenerateMappabilityRegions(bam_file, output_file, threshold));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rIRFinder_IRF_RLE_From_Cov", (DL_FUNC) &_rIRFinder_IRF_RLE_From_Cov, 5},
    {"_rIRFinder_IRF_RLEList_From_Cov", (DL_FUNC) &_rIRFinder_IRF_RLEList_From_Cov, 2},
    {"_rIRFinder_IRF_gunzip", (DL_FUNC) &_rIRFinder_IRF_gunzip, 2},
    {"_rIRFinder_IRF_main", (DL_FUNC) &_rIRFinder_IRF_main, 3},
    {"_rIRFinder_IRF_GenerateMappabilityReads", (DL_FUNC) &_rIRFinder_IRF_GenerateMappabilityReads, 5},
    {"_rIRFinder_IRF_GenerateMappabilityRegions", (DL_FUNC) &_rIRFinder_IRF_GenerateMappabilityRegions, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rIRFinder(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
