<tool id="irfinder_galaxy" name="IRFinder for Galaxy" version="0.1.0">
    
    <!-- [REQUIRED] Tool description displayed after the tool name -->
    <description>This runs IRFinder in BAM mode. Requires single IRFinder reference and returns aggregated output</description>
    
    <!-- [OPTIONAL] 3rd party tools, binaries, modules... required for the tool to work -->
    <requirements>
<!--
        <requirement type="binary">required_binary</requirement>
-->
    </requirements>
    
    <!-- [OPTIONAL] Command to be executed to get the tool's version string -->
    <version_command>
<!--
        tool_binary -v
-->
    </version_command>
    
    <!-- [REQUIRED] The command to execute -->
    <command><![CDATA[
		#if str($mode_condition.mode) == "main":
			${__tool_directory__}/irfinder_galaxy main '$mode_condition.input' '$mode_condition.ref' $output1 $output2
		#else if str($mode_condition.mode) == "gen_map_reads":
            #if str($mode_condition.fasta_type.fasta_source) == "all_fasta_source":
                ${__tool_directory__}/irfinder_galaxy gen_map_reads '$mode_condition.fasta_type.ref.fields.path' $output3 $mode_condition.read_len $mode_condition.read_stride
            #else if str($mode_condition.fasta_type.fasta_source) == "private_fasta":
                ${__tool_directory__}/irfinder_galaxy gen_map_reads '$mode_condition.fasta_type.ref' $output3 $mode_condition.read_len $mode_condition.read_stride
            #end if
        #else if str($mode_condition.mode) == "process_mappability_bam":
            #if str($mode_condition.includeCov == "yes"):
                ${__tool_directory__}/irfinder_galaxy process_mappability_bam '$mode_condition.input' $output4 $mode_condition.threshold $output6
            #else:
                ${__tool_directory__}/irfinder_galaxy process_mappability_bam '$mode_condition.input' $output4 $mode_condition.threshold
            #end if
        #else if str($mode_condition.mode) == "shuffle_fasta":
            cat '$mode_condition.input' | awk '{OFS="\t"; getline seq; print $0,seq}' | shuf | awk '{OFS="\n"; print $1,$2}' > $output5
        #end if
    ]]></command>
    
    <!-- [REQUIRED] Input files and tool parameters -->
    <inputs>
		<conditional name="mode_condition" >
			<param name="mode" type="select" label="Mode" help="" >
				<option value="main" selected="true">Analyze Aligned Reads (BAM)</option>
				<option value="gen_map_reads">Generate Mappability Reads</option>
				<option value="shuffle_fasta">Shuffle FASTA sequences</option>
				<option value="process_mappability_bam">Calculate Mappability Regions</option>
			</param>
            <when value="main">
                <param name="input" type="data" format="bam" label="Input BAM" help="An aligned RNA-seq file" />
                <param name="ref" type="data" format="data" label="Reference file" help="Generate IRFinder.ref using rIRFinder" />
            </when>
            <when value="gen_map_reads">
                <conditional name="fasta_type" >
                    <param name="fasta_source" type="select" label="FASTA Source" help="" >
                        <option value="all_fasta_source" selected="true">From Galaxy's ALL_FASTA Library</option>
                        <option value="private_fasta" selected="true">From User's History</option>
                    </param>
                    <when value="all_fasta_source">
                        <param name="ref" type="select" label="Source FASTA Sequence" help="A genome fasta file from ALL_FASTA">
                            <options from_data_table="all_fasta"/>
                        </param>
                    </when>
                    <when value="private_fasta">
                        <param name="ref" type="data" format="fasta" label="Source FASTA Sequence" help="A genome fasta file from user's history" />
                    </when>
                </conditional>
                <param name="read_len" type="integer" value="70" min="50" max="200" label="Read length"/>
                <param name="read_stride" type="integer" value="10" min="5" max="50" label="Read stride"/>
            </when>
            <when value="shuffle_fasta">
                <param name="input" type="data" format="fasta" label="FASTA reads to shuffle before mapping" help="Galaxy's RNA-STAR will attempt to 
                    sort BAM files by coordinates which may cause it to run out of memory. Use this awk-based utility to shuffle reads so they
                    are not coordinate-ordered before alignment using RNA-STAR." />
            </when>
            <when value="process_mappability_bam">
                <param name="input" type="data" format="bam" label="Mapped Mappability Reads (BAM)" help="An aligned file of mapped Mappability reads" />
                <param name="threshold" type="integer" value="4" min="0" max="20" label="Threshold read depth for mappability"/>
                <param name="includeCov" type="select" label="Include Coverage file">
                  <option value="yes" selected="true">Yes</option>
                  <option value="no">No</option>
                </param>
            </when>
		</conditional>
    </inputs>

    <!-- [STRONGLY RECOMMANDED] Exit code rules -->
    <stdio>
        <!-- [HELP] If no exit code rule is defined, the tool will stop if anything is written to STDERR -->
        <exit_code range="1:" level="fatal" />
    </stdio>
    
    <!-- [REQUIRED] Output files -->
    <outputs>
        <data name="output1" format="txt" label="IRFinder Summary Output">
			<filter>mode_condition['mode'] == 'main'</filter>
        </data>
        <data name="output2" format="data" label="IRFinder Coverage File"> 
			<filter>mode_condition['mode'] == 'main'</filter>
        </data>
        <data name="output3" format="fasta" label="Mappability Reads"> 
			<filter>mode_condition['mode'] == 'gen_map_reads'</filter>
        </data>
        <data name="output4" format="txt" label="Mappability Regions"> 
			<filter>mode_condition['mode'] == 'process_mappability_bam'</filter>
        </data>
        <data name="output5" format="fasta" label="Shuffled Mappability Reads"> 
			<filter>mode_condition['mode'] == 'shuffle_fasta'</filter>
        </data>
        <data name="output6" format="data" label="Mappability Coverage File"> 
			<filter>mode_condition['mode'] == 'process_mappability_bam'</filter>
			<filter>mode_condition['includeCov'] == 'yes'</filter>
        </data>
    </outputs>    
    
    <!-- [OPTIONAL] Tests to be run manually by the Galaxy admin -->
    <tests>
        <!-- [HELP] Test files have to be in the ~/test-data directory -->
<!--
        <test>
         <param name="input" value="input_test.txt" />
         <output name="output" file="output_test.txt" />
        </test>
-->
        <!-- [HELP] Multiple tests can be defined with different parameters -->
<!--
        <test>
        </test>
-->
    </tests>
    
    <!-- [OPTIONAL] Help displayed in Galaxy -->
    <help>

.. class:: infomark

**Authors** Alex Wong a.wong@centenary.org.au

---------------------------------------------------

.. class:: infomark

**Please cite** If you use this tool, please cite `Wong A (2020). NxtIRF - User friendly Intron Retention and Alternative Splicing Analysis &lt;https://www.jwongepirna.com/&gt;`_

---------------------------------------------------

==============
Tool Name
==============

-----------
Description
-----------

 | Description of the tool in 1 lines
 | or 2 lines


-----------------
Workflow position
-----------------

**Upstream tools**

====== =========== ======= ============
Name   output file format  parameter
====== =========== ======= ============
tool 1 outFile.tab tabular param name 1
tool 2 outFile.csv csv     param name 2
====== =========== ======= ============


**Downstream tools**

====== =========== =======
Name   output file format 
====== =========== =======
tool 1 outFile.tab tabular
tool 2 outFile.csv csv    
====== =========== =======


-----------
Input files
-----------

+-------------------------+-----------+
| Parameter : num + label |  Format   |
+=========================+===========+
| 1 : file1.tab           |  tabular  |
+-------------------------+-----------+
| 2 : file2.csv           |   csv     |
+-------------------------+-----------+

Constraints files : 
	* column 1 : description
	* column 5 : description


----------
Parameters
----------

parameter1
	Parameter 1 description

parameter2longer
	| Parameter 2 description
	| on 2 lines if needed


------------
Output files
------------

output.tab
	| File description
	| You can continue your analysis with the tool retcor or fillPeaks

outFile.csv
	File description

	
---------------------------------------------------

---------------
Working example
---------------

Input files
===========

| **These input files can be used in the purview "URL/Text:" of the tool "Get Data/Upload File",**
| **by checking the box "Convert spaces to tabs: YES"**

file1.txt
	Model input file::
	
		colonne1 colonne2 col3 etc
		element1.1 element1.2 el1.3 ...
		element2.1 elem2.2 el1.3 ...
		elem3.1 3.2 el1.3 ...

		
Parameters
==========

Parameter 1  -> **content**

Parameter 2  -> **content**


Output files
============

output.pdf

.. image:: ./static/images/output.png
        :width: 500
        :height: 400
	

output.txt

========== ========== ===== ===
colonne1   colonne 2  col3  etc
========== ========== ===== ===
element1.1 element1.2 el1.3 ...
element2.1 elem 2.2   el1.3 ...
elem3.1       3.2     el1.3 ...
========== ========== ===== ===


output.other::
	Something
	
---------------------------------------------------

.. class:: infomark

More information about formatting can be found here: http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html
    </help>
    
</tool>
