% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BuildRef.R
\name{BuildReference}
\alias{BuildReference}
\title{Builds reference files used by IRFinder / NxtIRF.}
\usage{
BuildReference(
  fasta = "genome.fa",
  gtf = "transcripts.gtf",
  ah_genome = "",
  ah_transcriptome = "",
  reference_path = "./Reference",
  genome_type = "",
  nonPolyARef = "",
  MappabilityRef = "",
  BlacklistRef = "",
  UseExtendedTranscripts = TRUE,
  localHub = FALSE,
  ah = AnnotationHub(localHub = localHub),
  BPPARAM = BiocParallel::bpparam()
)
}
\arguments{
\item{fasta}{The path to the user-supplied genome fasta file}

\item{gtf}{The path to the user-supplied transcript gtf file}

\item{ah_genome}{The name of the AnnotationHub record containing the genome 2bit file.
Leave blank to use user-supplied \code{fasta} file.}

\item{ah_transcriptome}{The name of the AnnotationHub record containing the transcript gtf file
Leave blank to use user-supplied \code{gtf} file.}

\item{reference_path}{The directory to store the reference files}

\item{genome_type}{Allows \code{BuildReference()} to select default \code{nonPolyARef} and \code{MappabilityRef}
for selected genomes. Allowed options include: 'hg38', 'hg19', 'mm9', 'mm10'. Leave blank to
supply custom \code{nonPolyARef} and \code{MappabilityRef} files}

\item{nonPolyARef}{A BED file (3 unnamed columns containing chromosome, start and end
coordinates) of regions defining known non-polyadenylated transcripts. This file is used for
QC analysis of IRFinder-processed files to measure Poly-A enrichment quality of samples.
Leave blank to not use a \code{nonPolyARef} file (or to use default - see \code{genome_type})}

\item{MappabilityRef}{A BED file (3 unnamed columns containing chromosome, start and end
coordinates) of poorly-mapped regions due to repeat elements in the genome. We recommend
using the default Mappability files supplied (see \code{genome_type}). Alternately, this
reference can be generated by running \code{GenerateMappabilityReads()} on the genome sequence,
followed by alignment of the produced fasta file to an aligner of choice (e.g. STAR, HISAT2).
The aligned sequences (as BAM file) should then be analysed using \code{GenerateMappabilityBED()},
which will provide the Mappability file to be used here.}

\item{UseExtendedTranscripts}{Should IRFinder include non-protein-coding transcripts such as
anti-sense and lincRNAs? Setting \code{FALSE} (default IRFinder) will exclude transcripts other than
\code{protein_coding} and \code{processed_transcript} transcripts from IR analysis.}

\item{localHub}{See \code{?AnnotationHub::AnnotationHub()}. Setting \code{TRUE} will run \code{AnnotationHub()}
in offline mode}

\item{ah}{An AnnotationHub object containing the records \code{ah_genome} and/or \code{ah_transcriptome}
records to be used.}

\item{BPPARAM}{A BPPARAM object for BiocParallel multi-threading.}

\item{BlackListRef}{A BED file (3 unnamed columns containing chromosome, start and end
coordinates) of regions to be otherwise excluded from IR analysis. Leave blank to not use a
\code{BlackListRef} file.}
}
\value{
Nothing. The created reference will be written to the given directory. This includes:
\itemize{
\item \code{reference_path}/IRFinder.ref.gz: A gzipped text file containing collated IRFinder references
to be used as input for the IRFinder analysis
\item \code{reference_path}/fst/: Contains fst files for subsequent easy access to NxtIRF generated
references
\item \code{reference_path}/resource/: Contains a TwoBitFile generated by this function for easy
subsequent access to the genome. Only applies if user-supplied \code{fasta} file is used.
}
}
\description{
This function builds the reference required by the IRFinder engine, as well
as access-ready refined splice annotation data for NxtIRF. This reference
can be created using either:
\enumerate{
\item AnnotationHub genome and gene annotation (Ensembl): supply the names of
the genome sequence \code{ah_genome} and gene annotations \code{ah_transcriptome}
(see example below), or
\item User-supplied FASTA and GTF file.
}
}
\examples{
## create an AnnotationHub object
ah = AnnotationHub::AnnotationHub()

## filter for entries containing c("Homo Sapiens", "Ensembl", "release-94")
records = AnnotationHub::query(ah, c("Homo Sapiens", "Ensembl", "release-94"))

## display summary of filtered records
print(records)
}
\seealso{
\code{\link[=GenerateMappabilityReads]{GenerateMappabilityReads()}}, \code{\link[=GenerateMappabilityBED]{GenerateMappabilityBED()}}, [AnnotationHub())]

[AnnotationHub())]: R:AnnotationHub())
}
